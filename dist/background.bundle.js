console.log("[Background] Service Worker started (Bundled Monaco Mode).");const o={};async function e(o,e,n=[]){try{await chrome.tabs.get(o)}catch(e){if(e.message.includes("No tab with id")||e.message.includes("Cannot access")||e.message.includes("Invalid tab ID")||e.message.includes("The tab was closed"))throw console.warn(`[Background] executeInMainWorld cannot proceed for Tab ${o}: Tab closed or inaccessible before execution.`),new Error(`Tab ${o} closed or inaccessible during script execution attempt.`);throw console.error(`[Background] Unexpected error checking tab ${o} status:`,e),e}try{const r=await chrome.scripting.executeScript({target:{tabId:o,allFrames:!1},world:"MAIN",func:e,args:n});if(r&&r.length>0&&r[0]){if(r[0].error)throw console.error(`[Background] Scripting execution error in Tab ${o}:`,r[0].error),new Error(`Script execution failed in MAIN world: ${r[0].error.message||"Unknown execution error"}`);return r[0].result}return void console.warn(`[Background] executeInMainWorld for Tab ${o}: No result returned from chrome.scripting.executeScript.`)}catch(e){if(e.message.includes("No tab with id")||e.message.includes("Cannot access")||e.message.includes("Invalid tab ID")||e.message.includes("Could not establish connection")||e.message.includes("The tab was closed"))throw console.warn(`[Background] executeInMainWorld failed for Tab ${o}: Tab became closed or inaccessible during execution.`),new Error(`Tab ${o} closed or inaccessible during script execution.`);throw console.error(`[Background] Error executing script in MAIN world (Tab ${o}):`,e),e}}async function n(o,n,r){let t=0;for(console.log(`[Background] (Tab ${o}) Starting polling for: ${r}`);t<40;){try{await chrome.tabs.get(o);const t=await e(o,n);if(t)return console.log(`[Background] (Tab ${o}) Polling SUCCESS for: ${r}. Result:`,t),t;const a=await e(o,(()=>window.monacoInjectError||window.monacoSyncError||("error"===window.monacoCreateStatus?window.monacoInjectError||"Create error":null)||("failed"===window.monacoSyncSetup?window.monacoSyncError||"Sync setup failed":null)));if(a)throw console.error(`[Background] (Tab ${o}) Page signaled error while polling for '${r}':`,a),new Error(`Page signaled error: ${a}`)}catch(e){if(e.message.includes(`Tab ${o} closed or inaccessible`))throw console.warn(`[Background] (Tab ${o}) Aborting poll for '${r}' because tab is closed/inaccessible.`),e;if(console.warn(`[Background] (Tab ${o}) Error during polling attempt ${t+1} for '${r}':`,e.message),e.message.includes("Script execution failed"))throw e}t++,await new Promise((o=>setTimeout(o,300)))}throw console.error(`[Background] (Tab ${o}) Polling TIMEOUT after ${t} attempts for: ${r}`),new Error(`Timeout waiting for ${r} in tab ${o}`)}chrome.runtime.onMessage.addListener(((r,t,a)=>{if(!t.tab?.id)return!1;const c=t.tab.id;switch(r.action){case"injectAndCreateMonaco":return r.options?(console.log(`[Background] Received 'injectAndCreateMonaco' from Tab ${c}`),async function(r,t,a){const{containerId:c,language:s,theme:i,initialCode:d,problemSlug:l}=t,g=t.saveEventName||"__monaco_save_code__";l?(o[r]=l,console.log(`[Background] (Tab ${r}) Associated slug '${l}'`)):console.warn(`[Background] (Tab ${r}) No problemSlug provided. Saving will not work for this tab.`),console.log(`[Background] (Tab ${r}) Starting Monaco injection process (Bundled) for slug '${l||"N/A"}'. Language (requested): ${s}`,{containerId:c,theme:i});try{console.log(`[Background] (Tab ${r}) Step 1: Polling for window.monaco.editor.create readiness...`),await n(r,(()=>void 0!==window.monaco&&void 0!==window.monaco.editor&&"function"==typeof window.monaco.editor.create),"window.monaco.editor.create function availability"),console.log(`[Background] (Tab ${r}) Step 1: window.monaco.editor.create confirmed.`),console.log(`[Background] (Tab ${r}) Step 2: Injecting editor creation call (Language: ${s})...`),console.log(`[Background] (Tab ${r}) Passing initialCode (length: ${d?.length??"N/A"}) to page.`),await e(r,((o,e,n,r)=>{if(console.log(`[PAGE BUNDLED] ENTERING page script. InitialCode type: ${typeof r}, Length: ${r?.length??"N/A"}`),console.log(`[PAGE BUNDLED] Executing editor creation script. Container ID: ${o}, Language: ${e}`),console.log("[PAGE BUNDLED] Checking window.MonacoEnvironment right before monaco.editor.create call:",window.MonacoEnvironment),"function"!=typeof window.MonacoEnvironment?.getWorkerUrl)return console.error("[PAGE BUNDLED] CRITICAL FAILURE: window.MonacoEnvironment.getWorkerUrl is NOT defined or is not a function!"),window.monacoInjectError="MonacoEnvironment.getWorkerUrl is not configured correctly.",void(window.monacoCreateStatus="error");console.log("[PAGE BUNDLED] SUCCESS: window.MonacoEnvironment.getWorkerUrl IS defined.");try{const o="editorWorker",n=window.MonacoEnvironment.getWorkerUrl("",o);if(console.log(`[PAGE BUNDLED] Result from getWorkerUrl('', '${o}') ===> ${n}`),e!==o){const o=window.MonacoEnvironment.getWorkerUrl("",e);console.log(`[PAGE BUNDLED] Result from getWorkerUrl('', '${e}') ===> ${o}`)}}catch(o){console.error("[PAGE BUNDLED] Error calling getWorkerUrl:",o)}window.monacoInjectError=null,window.monacoCreateStatus="pending";const t=document.getElementById(o);if(!t)return console.error(`[PAGE BUNDLED] FATAL ERROR: Container element #${o} not found!`),window.monacoInjectError=`Container element #${o} not found`,void(window.monacoCreateStatus="error");t.style.display="block",t.style.height=t.style.height||"600px",t.style.width=t.style.width||"100%",console.log(`[PAGE BUNDLED] Container #${o} found and styles applied. Dimensions: ${t.offsetWidth}x${t.offsetHeight}`);try{if("function"!=typeof window.monaco?.editor?.create)throw new Error("window.monaco.editor.create disappeared unexpectedly!");const o={value:r,language:e,theme:n,automaticLayout:!0,minimap:{enabled:!0},wordWrap:"on",scrollBeyondLastLine:!1,fontSize:14,quickSuggestions:{other:!0,comments:!0,strings:!0},suggestOnTriggerCharacters:!0};if(console.log("[PAGE BUNDLED] Calling monaco.editor.create with options:",{...o,value:`(Code length CONFIRMED INSIDE PAGE SCRIPT: ${r?.length??0})`}),window.leetCodeMonacoInstance=window.monaco.editor.create(t,o),!window.leetCodeMonacoInstance)throw new Error("monaco.editor.create call completed but returned no instance.");console.log("[PAGE BUNDLED] SUCCESS: Monaco editor instance seems to be created.");const a=window.leetCodeMonacoInstance.getModel();if(a){const o=a.getLanguageId();console.log(`[PAGE BUNDLED] Editor model language ID successfully set to: '${o}'. Expected: '${e}'`),o!==e&&console.warn(`[PAGE BUNDLED] Language ID mismatch! Model has '${o}', but '${e}' was requested.`),console.log("[PAGE BUNDLED] Adding error listeners for Monaco..."),window.MonacoErrorListener=o=>{console.error("[PAGE BUNDLED] --- MONACO ONERROR DETECTED (via window.MonacoErrorListener) ---:",o)},window.monaco?.Environment?.onWorkerError?(window.monaco.Environment.onWorkerError(((o,e)=>{console.error(`[PAGE BUNDLED] --- MONACO ENV WORKER ERROR (Label: ${o}) ---:`,e)})),console.log("[PAGE BUNDLED] Attached listener to monaco.Environment.onWorkerError.")):console.warn("[PAGE BUNDLED] window.monaco.Environment.onWorkerError not available."),window.addEventListener("unhandledrejection",(function(o){console.error("[PAGE BUNDLED] --- UNHANDLED REJECTION DETECTED ---:",o.reason)})),console.log("[PAGE BUNDLED] Attached listener for global unhandledrejection.")}else console.warn("[PAGE BUNDLED] Editor instance created, but could not get model immediately to verify language or add listeners.");window.monacoCreateStatus="success"}catch(o){console.error("[PAGE BUNDLED] ERROR creating Monaco editor instance:",o),window.monacoInjectError=`Editor creation failed: ${o.message||String(o)}`,window.monacoCreateStatus="error"}}),[c,s,i,d]),console.log(`[Background] (Tab ${r}) Step 2: Editor creation code injection command sent.`),console.log(`[Background] (Tab ${r}) Step 2: Editor creation code injection command sent.`),console.log(`[Background] (Tab ${r}) Step 3: Polling for editor creation status (window.monacoCreateStatus)...`),await n(r,(()=>"success"===window.monacoCreateStatus||"error"===window.monacoCreateStatus),"editor creation status (window.monacoCreateStatus)");const o=await e(r,(()=>window.monacoCreateStatus));if("success"!==o){const n=await e(r,(()=>window.monacoInjectError));throw console.error(`[Background] (Tab ${r}) Editor creation failed in page. Status: ${o}, Error: ${n||"Unknown page error"}`),new Error(`Editor creation failed. Status: ${o}, Error: ${n||"Unknown page error"}`)}console.log(`[Background] (Tab ${r}) Step 3: Monaco editor instance confirmed created successfully.`),console.log(`[Background] (Tab ${r}) Step 4: Injecting code sync listener & save trigger...`),await e(r,(o=>{if(console.log("[PAGE BUNDLED] Setting up code sync listener & save event trigger..."),window.monacoSyncError=null,window.monacoSyncSetup="pending",!window.leetCodeMonacoInstance)return console.error("[PAGE BUNDLED] Sync Setup FATAL: window.leetCodeMonacoInstance is not defined!"),window.monacoSyncError="leetCodeMonacoInstance not found during sync setup.",void(window.monacoSyncSetup="failed");let e;window.leetCodeMonacoInstance.onDidChangeModelContent((()=>{clearTimeout(e),window.monacoSyncStatus="debouncing",e=setTimeout((()=>{console.log("[PAGE BUNDLED] Debounced change detected. Triggering save event dispatch..."),window.monacoSyncStatus="triggering_save";try{const e=window.leetCodeMonacoInstance.getValue();console.log(`[PAGE BUNDLED] Dispatching custom event '${o}'...`);const n=new CustomEvent(o,{detail:{code:e}});window.dispatchEvent(n),window.monacoSyncStatus="save_requested"}catch(o){console.error("[PAGE BUNDLED] Runtime Error during save event dispatch:",o),window.monacoSyncError=`Runtime error dispatching save event: ${o.message}`,window.monacoSyncStatus="error"}}),350)})),console.log("[PAGE BUNDLED] Code sync listener attached successfully."),window.monacoSyncSetup="success"}),[g]),console.log(`[Background] (Tab ${r}) Step 4: Sync listener injected.`),console.log(`[Background] (Tab ${r}) Monaco (Bundled) injection and setup process completed successfully.`),a({success:!0})}catch(n){console.error(`[Background] (Tab ${r}) FATAL ERROR during Monaco (Bundled) injection/setup process:`,n),delete o[r];const t=n instanceof Error?n.message:String(n);try{await chrome.tabs.get(r),await e(r,(o=>{window.monacoInjectError=`Background failure: ${o}`,"success"!==window.monacoCreateStatus&&(window.monacoCreateStatus="error"),"success"!==window.monacoSyncSetup&&(window.monacoSyncSetup="failed"),console.error(`[PAGE BUNDLED] Setting error flags due to background failure: ${o}`)}),[t])}catch(o){console.warn(`[Background] (Tab ${r}) Failed to set error state on page during cleanup:`,o.message)}a({success:!1,error:t})}}(c,r.options,a).catch((o=>{console.error(`[Background] Uncaught error from injectAndSetupMonaco for Tab ${c}:`,o);try{a({success:!1,error:`Unhandled background error: ${o.message}`})}catch(o){console.warn(`[Background] Failed to send final error response for Tab ${c}:`,o.message)}})),!0):(console.error(`[Background] Received 'injectAndCreateMonaco' without options from Tab ${c}`),a({success:!1,error:"Missing 'options' in message."}),!1);case"saveCodeForTab":const t=o[c],s=r.code;if(!t)return console.error(`[Background] (Tab ${c}) Cannot save code: No slug associated.`),a({success:!1,error:`Cannot save: Slug for Tab ${c} not found.`}),!1;if(null==s)return console.error(`[Background] (Tab ${c}) Cannot save code for slug '${t}': Code is missing.`),a({success:!1,error:"Cannot save: Code is missing."}),!1;const i=`leetcodeCode-${t}`;return console.log(`[Background] (Tab ${c}) Saving code for slug '${t}' (length: ${s.length}). Key: ${i}`),chrome.storage.local.set({[i]:s},(()=>{chrome.runtime.lastError?(console.error(`[Background] (Tab ${c}) Error saving code to storage for slug '${t}':`,chrome.runtime.lastError),a({success:!1,error:chrome.runtime.lastError.message})):a({success:!0})})),!0;default:return!1}})),chrome.tabs.onRemoved.addListener(((e,n)=>{o[e]&&(console.log(`[Background] Tab ${e} removed. Cleaning up associated slug '${o[e]}'.`),delete o[e])})),chrome.tabs.onUpdated.addListener(((e,n,r)=>{if(o[e]&&"complete"===n.status&&r.url){const n=o[e];new RegExp(`^https?://(?:www\\.)?leetcode\\.com/problems/${n}(?:/.*)?$`,"i").test(r.url)||(console.log(`[Background] Tab ${e} navigated away from problem '${n}' (New URL: ${r.url}). Cleaning up slug association.`),delete o[e])}})),chrome.runtime.onInstalled.addListener((o=>{console.log(`[Background] Extension ${o.reason}. Version: ${chrome.runtime.getManifest().version}`)})),chrome.runtime.onStartup.addListener((()=>{console.log("[Background] Extension started up.")}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eUI1RixFQUFJNkYsSUFBSyxDQUMvRCxNQUFNQyxFQUFpQnRJLEVBQVNHLEdBQ04sSUFBSW9JLE9BQU8sZ0RBQWdERCxhQUEyQixLQUN6RkUsS0FBS2hHLEVBQUk2RixPQUM1QnZJLFFBQVFDLElBQUksb0JBQW9CSSxrQ0FBc0NtSSxnQkFBNkI5RixFQUFJNkYsOENBQ2hHckksRUFBU0csR0FFeEIsS0FJTEcsT0FBTzZCLFFBQVFzRyxZQUFZcEcsYUFBWXFHLElBQ25DNUksUUFBUUMsSUFBSSwwQkFBMEIySSxFQUFRMUMsb0JBQW9CMUYsT0FBTzZCLFFBQVF3RyxjQUFjQyxVQUFVLElBRTdHdEksT0FBTzZCLFFBQVEwRyxVQUFVeEcsYUFBWSxLQUNqQ3ZDLFFBQVFDLElBQUkscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vYmFja2dyb3VuZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBiYWNrZ3JvdW5kLmpzIChCdW5kbGVyIFZlcnNpb24pXG5jb25zb2xlLmxvZygnW0JhY2tncm91bmRdIFNlcnZpY2UgV29ya2VyIHN0YXJ0ZWQgKEJ1bmRsZWQgTW9uYWNvIE1vZGUpLicpO1xuXG4vLyAtLS0gU3RhdGUgLS0tXG5jb25zdCB0YWJTbHVncyA9IHt9O1xuXG4vLyAtLS0gQ29uc3RhbnRzIC0tLVxuY29uc3QgUE9MTElOR19JTlRFUlZBTF9NUyA9IDMwMDtcbmNvbnN0IE1BWF9QT0xMSU5HX0FUVEVNUFRTID0gNDA7IC8vIH4xMiBzZWNvbmRzXG5jb25zdCBTQ1JJUFRfSU5KRUNUSU9OX1dPUkxEID0gJ01BSU4nO1xuXG4vLyAtLS0gSGVscGVyIEZ1bmN0aW9ucyAoZXhlY3V0ZUluTWFpbldvcmxkLCBwb2xsRm9yQ29uZGl0aW9uKSAtLS1cblxuLyoqXG4gKiBFeGVjdXRlcyBhIGZ1bmN0aW9uIGluIHRoZSBNQUlOIHdvcmxkIGNvbnRleHQgb2YgYSBnaXZlbiB0YWIuXG4gKiBIYW5kbGVzIHBvdGVudGlhbCBlcnJvcnMgbGlrZSB0YWIgY2xvc3VyZSBvciBhY2Nlc3MgaXNzdWVzLlxuICovXG5hc3luYyBmdW5jdGlvbiBleGVjdXRlSW5NYWluV29ybGQodGFiSWQsIGZ1bmMsIGFyZ3MgPSBbXSkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIENoZWNrIHRhYiBleGlzdGVuY2UgYmVmb3JlIGF0dGVtcHRpbmcgZXhlY3V0aW9uXG4gICAgICAgIGF3YWl0IGNocm9tZS50YWJzLmdldCh0YWJJZCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gSGFuZGxlIHNwZWNpZmljIGVycm9ycyBpbmRpY2F0aW5nIHRoZSB0YWIgaXMgZ29uZSBvciBpbmFjY2Vzc2libGVcbiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJObyB0YWIgd2l0aCBpZFwiKSB8fCBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiQ2Fubm90IGFjY2Vzc1wiKSB8fCBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiSW52YWxpZCB0YWIgSURcIikgfHwgZXJyb3IubWVzc2FnZS5pbmNsdWRlcyhcIlRoZSB0YWIgd2FzIGNsb3NlZFwiKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbQmFja2dyb3VuZF0gZXhlY3V0ZUluTWFpbldvcmxkIGNhbm5vdCBwcm9jZWVkIGZvciBUYWIgJHt0YWJJZH06IFRhYiBjbG9zZWQgb3IgaW5hY2Nlc3NpYmxlIGJlZm9yZSBleGVjdXRpb24uYCk7XG4gICAgICAgICAgICAvLyBUaHJvdyBhIHNwZWNpZmljIGVycm9yIHR5cGUgb3IgbWVzc2FnZSB0byBiZSBjYXVnaHQgYnkgdGhlIGNhbGxlclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWIgJHt0YWJJZH0gY2xvc2VkIG9yIGluYWNjZXNzaWJsZSBkdXJpbmcgc2NyaXB0IGV4ZWN1dGlvbiBhdHRlbXB0LmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlLXRocm93IG90aGVyIHVuZXhwZWN0ZWQgZXJyb3JzIGZyb20gY2hyb21lLnRhYnMuZ2V0XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFtCYWNrZ3JvdW5kXSBVbmV4cGVjdGVkIGVycm9yIGNoZWNraW5nIHRhYiAke3RhYklkfSBzdGF0dXM6YCwgZXJyb3IpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICAvLyBQcm9jZWVkIHdpdGggc2NyaXB0IGV4ZWN1dGlvbiBpZiB0YWIgY2hlY2sgcGFzc2VkXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGNocm9tZS5zY3JpcHRpbmcuZXhlY3V0ZVNjcmlwdCh7XG4gICAgICAgICAgICB0YXJnZXQ6IHsgdGFiSWQ6IHRhYklkLCBhbGxGcmFtZXM6IGZhbHNlIH0sIC8vIFRhcmdldCBvbmx5IHRoZSB0b3AgZnJhbWVcbiAgICAgICAgICAgIHdvcmxkOiBTQ1JJUFRfSU5KRUNUSU9OX1dPUkxELFxuICAgICAgICAgICAgZnVuYzogZnVuYyxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICAgICAgICAvLyBpbmplY3RJbW1lZGlhdGVseTogdHJ1ZSAvLyBPcHRpb25hbDogTWlnaHQgaGVscCBpbiBzb21lIHJhY2UgY29uZGl0aW9ucywgdGVzdCBpZiBuZWVkZWRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2hlY2sgcmVzdWx0cyBmb3JtYXQgYW5kIHJldHVybiB0aGUgYWN0dWFsIHJlc3VsdFxuICAgICAgICBpZiAocmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCA+IDAgJiYgcmVzdWx0c1swXSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGVycm9ycyByZXBvcnRlZCBieSB0aGUgZXhlY3V0aW9uIGZyYW1ld29yayBpdHNlbGZcbiAgICAgICAgICAgIGlmIChyZXN1bHRzWzBdLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0JhY2tncm91bmRdIFNjcmlwdGluZyBleGVjdXRpb24gZXJyb3IgaW4gVGFiICR7dGFiSWR9OmAsIHJlc3VsdHNbMF0uZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU2NyaXB0IGV4ZWN1dGlvbiBmYWlsZWQgaW4gTUFJTiB3b3JsZDogJHtyZXN1bHRzWzBdLmVycm9yLm1lc3NhZ2UgfHwgJ1Vua25vd24gZXhlY3V0aW9uIGVycm9yJ31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgcmVzdWx0IGZyb20gdGhlIGV4ZWN1dGVkIGZ1bmN0aW9uXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0c1swXS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIGNhc2VzIHdoZXJlIGV4ZWN1dGlvbiBtaWdodCBub3QgcmV0dXJuIGEgcmVzdWx0IHN0cnVjdHVyZSBhcyBleHBlY3RlZFxuICAgICAgICBjb25zb2xlLndhcm4oYFtCYWNrZ3JvdW5kXSBleGVjdXRlSW5NYWluV29ybGQgZm9yIFRhYiAke3RhYklkfTogTm8gcmVzdWx0IHJldHVybmVkIGZyb20gY2hyb21lLnNjcmlwdGluZy5leGVjdXRlU2NyaXB0LmApO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gQ2F0Y2ggZXJyb3JzIHNwZWNpZmljYWxseSBmcm9tIGNocm9tZS5zY3JpcHRpbmcuZXhlY3V0ZVNjcmlwdFxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgZXJyb3IgaXMgZHVlIHRvIHRoZSB0YWIgYmVjb21pbmcgaW52YWxpZCAqZHVyaW5nKiB0aGUgY2FsbFxuICAgICAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcyhcIk5vIHRhYiB3aXRoIGlkXCIpIHx8IGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJDYW5ub3QgYWNjZXNzXCIpIHx8IGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJJbnZhbGlkIHRhYiBJRFwiKSB8fCBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiQ291bGQgbm90IGVzdGFibGlzaCBjb25uZWN0aW9uXCIpIHx8IGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJUaGUgdGFiIHdhcyBjbG9zZWRcIikpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW0JhY2tncm91bmRdIGV4ZWN1dGVJbk1haW5Xb3JsZCBmYWlsZWQgZm9yIFRhYiAke3RhYklkfTogVGFiIGJlY2FtZSBjbG9zZWQgb3IgaW5hY2Nlc3NpYmxlIGR1cmluZyBleGVjdXRpb24uYCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRhYiAke3RhYklkfSBjbG9zZWQgb3IgaW5hY2Nlc3NpYmxlIGR1cmluZyBzY3JpcHQgZXhlY3V0aW9uLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIExvZyBhbmQgcmUtdGhyb3cgb3RoZXIgZXhlY3V0aW9uIGVycm9yc1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbQmFja2dyb3VuZF0gRXJyb3IgZXhlY3V0aW5nIHNjcmlwdCBpbiBNQUlOIHdvcmxkIChUYWIgJHt0YWJJZH0pOmAsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7IC8vIFJlLXRocm93IHRoZSBlcnJvciB0byBiZSBoYW5kbGVkIGJ5IHRoZSBjYWxsaW5nIGZ1bmN0aW9uIChlLmcuLCBwb2xsRm9yQ29uZGl0aW9uKVxuICAgIH1cbn1cblxuXG4vKipcbiAqIFBvbGxzIGEgY29uZGl0aW9uIGluIHRoZSBNQUlOIHdvcmxkIG9mIGEgdGFiIHVudGlsIGl0J3MgbWV0IG9yIHRpbWVvdXQvZXJyb3Igb2NjdXJzLlxuICovXG5hc3luYyBmdW5jdGlvbiBwb2xsRm9yQ29uZGl0aW9uKHRhYklkLCBjaGVja0Z1bmMsIGRlc2NyaXB0aW9uKSB7XG4gICAgbGV0IGF0dGVtcHRzID0gMDtcbiAgICBjb25zb2xlLmxvZyhgW0JhY2tncm91bmRdIChUYWIgJHt0YWJJZH0pIFN0YXJ0aW5nIHBvbGxpbmcgZm9yOiAke2Rlc2NyaXB0aW9ufWApO1xuXG4gICAgd2hpbGUgKGF0dGVtcHRzIDwgTUFYX1BPTExJTkdfQVRURU1QVFMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIENoZWNrIHRhYiB2YWxpZGl0eSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBhdHRlbXB0ICpiZWZvcmUqIGV4ZWN1dGluZyBzY3JpcHRcbiAgICAgICAgICAgIGF3YWl0IGNocm9tZS50YWJzLmdldCh0YWJJZCk7XG5cbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIGNoZWNrIGZ1bmN0aW9uIGluIHRoZSBNQUlOIHdvcmxkXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjdXRlSW5NYWluV29ybGQodGFiSWQsIGNoZWNrRnVuYyk7XG5cbiAgICAgICAgICAgIC8vIENvbmRpdGlvbiBtZXQ/XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBQb2xsaW5nIFNVQ0NFU1MgZm9yOiAke2Rlc2NyaXB0aW9ufS4gUmVzdWx0OmAsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsgLy8gU3VjY2VzcyFcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHNwZWNpZmljIGVycm9yIGZsYWdzIHNldCBieSB0aGUgcGFnZSBzY3JpcHQgKG9wdGlvbmFsIGJ1dCB1c2VmdWwpXG4gICAgICAgICAgICBjb25zdCBwYWdlRXJyb3JTdGF0dXMgPSBhd2FpdCBleGVjdXRlSW5NYWluV29ybGQodGFiSWQsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93Lm1vbmFjb0luamVjdEVycm9yIHx8IHdpbmRvdy5tb25hY29TeW5jRXJyb3IgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHdpbmRvdy5tb25hY29DcmVhdGVTdGF0dXMgPT09ICdlcnJvcicgPyB3aW5kb3cubW9uYWNvSW5qZWN0RXJyb3IgfHwgJ0NyZWF0ZSBlcnJvcicgOiBudWxsKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAod2luZG93Lm1vbmFjb1N5bmNTZXR1cCA9PT0gJ2ZhaWxlZCcgPyB3aW5kb3cubW9uYWNvU3luY0Vycm9yIHx8ICdTeW5jIHNldHVwIGZhaWxlZCcgOiBudWxsKTtcbiAgICAgICAgICAgICAgICAvLyBBZGQgYW55IG90aGVyIHJlbGV2YW50IGVycm9yIGZsYWdzIHlvdXIgcGFnZSBzY3JpcHQgbWlnaHQgc2V0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHBhZ2VFcnJvclN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBQYWdlIHNpZ25hbGVkIGVycm9yIHdoaWxlIHBvbGxpbmcgZm9yICcke2Rlc2NyaXB0aW9ufSc6YCwgcGFnZUVycm9yU3RhdHVzKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhZ2Ugc2lnbmFsZWQgZXJyb3I6ICR7cGFnZUVycm9yU3RhdHVzfWApOyAvLyBGYWlsIHBvbGxpbmcgb24gcGFnZSBlcnJvclxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb25kaXRpb24gbm90IG1ldCwgbm8gZXJyb3IgeWV0LCBjb250aW51ZSBwb2xsaW5nLi4uXG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBlcnJvcnMgZnJvbSBleGVjdXRlSW5NYWluV29ybGQgb3IgY2hyb21lLnRhYnMuZ2V0XG4gICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcyhgVGFiICR7dGFiSWR9IGNsb3NlZCBvciBpbmFjY2Vzc2libGVgKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgW0JhY2tncm91bmRdIChUYWIgJHt0YWJJZH0pIEFib3J0aW5nIHBvbGwgZm9yICcke2Rlc2NyaXB0aW9ufScgYmVjYXVzZSB0YWIgaXMgY2xvc2VkL2luYWNjZXNzaWJsZS5gKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjsgLy8gUmUtdGhyb3cgdGhlIHNwZWNpZmljIGVycm9yIHRvIGJlIGNhdWdodCBieSB0aGUgbWFpbiBsb2dpY1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTG9nIG90aGVyIHBvbGxpbmcgZXJyb3JzIGJ1dCBhbGxvdyByZXRyaWVzIHVubGVzcyBpdCdzIGZhdGFsXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBFcnJvciBkdXJpbmcgcG9sbGluZyBhdHRlbXB0ICR7YXR0ZW1wdHMgKyAxfSBmb3IgJyR7ZGVzY3JpcHRpb259JzpgLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIC8vIERlY2lkZSBpZiB0aGUgZXJyb3IgaXMgZmF0YWwgZm9yIHBvbGxpbmcgKGUuZy4sIHNjcmlwdCBleGVjdXRpb24gZXJyb3JzIG1pZ2h0IGJlKVxuICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJTY3JpcHQgZXhlY3V0aW9uIGZhaWxlZFwiKSkge1xuICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjsgLy8gUHJvcGFnYXRlIGZhdGFsIHNjcmlwdCBlcnJvcnMgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl0IG1pZ2h0IGJlIHRyYW5zaWVudCBhbmQgY29udGludWUgcG9sbGluZyBhZnRlciBkZWxheVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2FpdCBiZWZvcmUgdGhlIG5leHQgYXR0ZW1wdFxuICAgICAgICBhdHRlbXB0cysrO1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgUE9MTElOR19JTlRFUlZBTF9NUykpO1xuICAgIH1cblxuICAgIC8vIFBvbGxpbmcgdGltZWQgb3V0XG4gICAgY29uc29sZS5lcnJvcihgW0JhY2tncm91bmRdIChUYWIgJHt0YWJJZH0pIFBvbGxpbmcgVElNRU9VVCBhZnRlciAke2F0dGVtcHRzfSBhdHRlbXB0cyBmb3I6ICR7ZGVzY3JpcHRpb259YCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaW1lb3V0IHdhaXRpbmcgZm9yICR7ZGVzY3JpcHRpb259IGluIHRhYiAke3RhYklkfWApO1xufVxuXG5cbi8vIC0tLSBDb3JlIExvZ2ljOiBNb25hY28gSW5qZWN0aW9uIChCdW5kbGVyIFZlcnNpb24pIC0tLVxuYXN5bmMgZnVuY3Rpb24gaW5qZWN0QW5kU2V0dXBNb25hY28odGFiSWQsIG9wdGlvbnMsIHNlbmRSZXNwb25zZSkge1xuICAgIC8vIERlc3RydWN0dXJlIG9wdGlvbnMgLSBub3RlICdsYW5ndWFnZScgd2lsbCBiZSAnamF2YXNjcmlwdCcgZHVlIHRvIGNvbnRlbnQgc2NyaXB0IG92ZXJyaWRlIGZvciB0aGlzIHRlc3QgcnVuXG4gICAgY29uc3QgeyBjb250YWluZXJJZCwgbGFuZ3VhZ2UsIHRoZW1lLCBpbml0aWFsQ29kZSwgcHJvYmxlbVNsdWcgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgc2F2ZUV2ZW50TmFtZSA9IG9wdGlvbnMuc2F2ZUV2ZW50TmFtZSB8fCAnX19tb25hY29fc2F2ZV9jb2RlX18nO1xuXG4gICAgLy8gQXNzb2NpYXRlIHNsdWcgd2l0aCB0YWIgSUQgZm9yIHNhdmluZ1xuICAgICBpZiAocHJvYmxlbVNsdWcpIHtcbiAgICAgICAgIHRhYlNsdWdzW3RhYklkXSA9IHByb2JsZW1TbHVnO1xuICAgICAgICAgY29uc29sZS5sb2coYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBBc3NvY2lhdGVkIHNsdWcgJyR7cHJvYmxlbVNsdWd9J2ApO1xuICAgICB9IGVsc2Uge1xuICAgICAgICAgY29uc29sZS53YXJuKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgTm8gcHJvYmxlbVNsdWcgcHJvdmlkZWQuIFNhdmluZyB3aWxsIG5vdCB3b3JrIGZvciB0aGlzIHRhYi5gKTtcbiAgICAgfVxuXG4gICAgY29uc29sZS5sb2coYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBTdGFydGluZyBNb25hY28gaW5qZWN0aW9uIHByb2Nlc3MgKEJ1bmRsZWQpIGZvciBzbHVnICcke3Byb2JsZW1TbHVnIHx8ICdOL0EnfScuIExhbmd1YWdlIChyZXF1ZXN0ZWQpOiAke2xhbmd1YWdlfWAsIHsgY29udGFpbmVySWQsIHRoZW1lIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gLS0tIFN0ZXAgMTogUG9sbCBmb3IgTW9uYWNvIEVkaXRvciBBUEkgUmVhZGluZXNzIGluIFBhZ2UgLS0tXG4gICAgICAgIGNvbnNvbGUubG9nKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgU3RlcCAxOiBQb2xsaW5nIGZvciB3aW5kb3cubW9uYWNvLmVkaXRvci5jcmVhdGUgcmVhZGluZXNzLi4uYCk7XG4gICAgICAgIGF3YWl0IHBvbGxGb3JDb25kaXRpb24oXG4gICAgICAgICAgICB0YWJJZCxcbiAgICAgICAgICAgICgpID0+IHR5cGVvZiB3aW5kb3cubW9uYWNvICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICAgdHlwZW9mIHdpbmRvdy5tb25hY28uZWRpdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICAgdHlwZW9mIHdpbmRvdy5tb25hY28uZWRpdG9yLmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgICd3aW5kb3cubW9uYWNvLmVkaXRvci5jcmVhdGUgZnVuY3Rpb24gYXZhaWxhYmlsaXR5J1xuICAgICAgICApO1xuICAgICAgICBjb25zb2xlLmxvZyhgW0JhY2tncm91bmRdIChUYWIgJHt0YWJJZH0pIFN0ZXAgMTogd2luZG93Lm1vbmFjby5lZGl0b3IuY3JlYXRlIGNvbmZpcm1lZC5gKTtcbiAgICAgICAgICAgIC8vIC0tLSBTdGVwIDI6IEluamVjdCBFZGl0b3IgQ3JlYXRpb24gQ29kZSAtLS1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgU3RlcCAyOiBJbmplY3RpbmcgZWRpdG9yIGNyZWF0aW9uIGNhbGwgKExhbmd1YWdlOiAke2xhbmd1YWdlfSkuLi5gKTtcbiAgICAgICAgICAgIC8vIEVuc3VyZSB0aGUgJ2luaXRpYWxDb2RlJyB2YXJpYWJsZSBoZXJlIGluIHRoZSBiYWNrZ3JvdW5kIHNjb3BlIGhhcyB0aGUgY29ycmVjdCBjb2RlIHN0cmluZyBiZWZvcmUgcGFzc2luZyBpdC5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgUGFzc2luZyBpbml0aWFsQ29kZSAobGVuZ3RoOiAke2luaXRpYWxDb2RlPy5sZW5ndGggPz8gJ04vQSd9KSB0byBwYWdlLmApO1xuICAgIFxuICAgICAgICAgICAgYXdhaXQgZXhlY3V0ZUluTWFpbldvcmxkKHRhYklkLCAocGFzc2VkQ29udGFpbmVySWQsIHBhc3NlZExhbmd1YWdlLCBwYXNzZWRUaGVtZSwgcGFzc2VkSW5pdGlhbENvZGUpID0+IHtcbiAgICAgICAgICAgICAgICAvLyAtLS0gU1RBUlQ6IENvZGUgRXhlY3V0ZWQgSW5zaWRlIExlZXRDb2RlIFBhZ2UgKE1BSU4gV29ybGQpIC0tLVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIDEuIENvbmZpcm0gYXJndW1lbnRzIHJlY2VpdmVkIGZyb20gYmFja2dyb3VuZCBzY3JpcHRcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1BBR0UgQlVORExFRF0gRU5URVJJTkcgcGFnZSBzY3JpcHQuIEluaXRpYWxDb2RlIHR5cGU6ICR7dHlwZW9mIHBhc3NlZEluaXRpYWxDb2RlfSwgTGVuZ3RoOiAke3Bhc3NlZEluaXRpYWxDb2RlPy5sZW5ndGggPz8gJ04vQSd9YCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtQQUdFIEJVTkRMRURdIEV4ZWN1dGluZyBlZGl0b3IgY3JlYXRpb24gc2NyaXB0LiBDb250YWluZXIgSUQ6ICR7cGFzc2VkQ29udGFpbmVySWR9LCBMYW5ndWFnZTogJHtwYXNzZWRMYW5ndWFnZX1gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyAyLiBDaGVjayBNb25hY28gRW52aXJvbm1lbnQgYW5kIFdvcmtlciBVUkxzXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQQUdFIEJVTkRMRURdIENoZWNraW5nIHdpbmRvdy5Nb25hY29FbnZpcm9ubWVudCByaWdodCBiZWZvcmUgbW9uYWNvLmVkaXRvci5jcmVhdGUgY2FsbDonLCB3aW5kb3cuTW9uYWNvRW52aXJvbm1lbnQpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93Lk1vbmFjb0Vudmlyb25tZW50Py5nZXRXb3JrZXJVcmwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUEFHRSBCVU5ETEVEXSBTVUNDRVNTOiB3aW5kb3cuTW9uYWNvRW52aXJvbm1lbnQuZ2V0V29ya2VyVXJsIElTIGRlZmluZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAvLyBMb2cgdGhlIHBhdGhzIE1vbmFjbyBzaG91bGQgYmUgdXNpbmdcbiAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGl0b3JXb3JrZXJMYWJlbCA9ICdlZGl0b3JXb3JrZXInO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGl0b3JXb3JrZXJQYXRoID0gd2luZG93Lk1vbmFjb0Vudmlyb25tZW50LmdldFdvcmtlclVybCgnJywgZWRpdG9yV29ya2VyTGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1BBR0UgQlVORExFRF0gUmVzdWx0IGZyb20gZ2V0V29ya2VyVXJsKCcnLCAnJHtlZGl0b3JXb3JrZXJMYWJlbH0nKSA9PT0+ICR7ZWRpdG9yV29ya2VyUGF0aH1gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9nIHNwZWNpZmljIGxhbmd1YWdlIHdvcmtlciBwYXRoIGlmIGRpZmZlcmVudCBmcm9tIGVkaXRvcldvcmtlclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwYXNzZWRMYW5ndWFnZSAhPT0gZWRpdG9yV29ya2VyTGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYW5ndWFnZVdvcmtlclBhdGggPSB3aW5kb3cuTW9uYWNvRW52aXJvbm1lbnQuZ2V0V29ya2VyVXJsKCcnLCBwYXNzZWRMYW5ndWFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtQQUdFIEJVTkRMRURdIFJlc3VsdCBmcm9tIGdldFdvcmtlclVybCgnJywgJyR7cGFzc2VkTGFuZ3VhZ2V9JykgPT09PiAke2xhbmd1YWdlV29ya2VyUGF0aH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1BBR0UgQlVORExFRF0gRXJyb3IgY2FsbGluZyBnZXRXb3JrZXJVcmw6XCIsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgIC8vIC0tLSBNYW51YWwgd29ya2VyIHRlc3QgYmxvY2sgaXMgaW50ZW50aW9uYWxseSBSRU1PVkVEIC0tLVxuICAgICAgICAgICAgICAgICAgICAgLy8gV2UgYXJlIG5vdyBsZXR0aW5nIE1vbmFjbyBoYW5kbGUgaXRzIG93biB3b3JrZXIgbGlmZWN5Y2xlIGFuZCBsb29raW5nIGZvciBNb25hY28ncyBlcnJvcnMuXG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1BBR0UgQlVORExFRF0gQ1JJVElDQUwgRkFJTFVSRTogd2luZG93Lk1vbmFjb0Vudmlyb25tZW50LmdldFdvcmtlclVybCBpcyBOT1QgZGVmaW5lZCBvciBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1vbmFjb0luamVjdEVycm9yID0gJ01vbmFjb0Vudmlyb25tZW50LmdldFdvcmtlclVybCBpcyBub3QgY29uZmlndXJlZCBjb3JyZWN0bHkuJztcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1vbmFjb0NyZWF0ZVN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gRXhpdCBpZiBlbnZpcm9ubWVudCBzZXR1cCBmYWlsZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gMy4gUHJlcGFyZSBmb3IgRWRpdG9yIENyZWF0aW9uXG4gICAgICAgICAgICAgICAgd2luZG93Lm1vbmFjb0luamVjdEVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICB3aW5kb3cubW9uYWNvQ3JlYXRlU3RhdHVzID0gJ3BlbmRpbmcnO1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhc3NlZENvbnRhaW5lcklkKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbUEFHRSBCVU5ETEVEXSBGQVRBTCBFUlJPUjogQ29udGFpbmVyIGVsZW1lbnQgIyR7cGFzc2VkQ29udGFpbmVySWR9IG5vdCBmb3VuZCFgKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1vbmFjb0luamVjdEVycm9yID0gYENvbnRhaW5lciBlbGVtZW50ICMke3Bhc3NlZENvbnRhaW5lcklkfSBub3QgZm91bmRgO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubW9uYWNvQ3JlYXRlU3RhdHVzID0gJ2Vycm9yJztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgY29udGFpbmVyIGlzIHZpc2libGUgYW5kIGhhcyBkaW1lbnNpb25zXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBjb250YWluZXIuc3R5bGUuaGVpZ2h0IHx8ICc2MDBweCc7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gY29udGFpbmVyLnN0eWxlLndpZHRoIHx8ICcxMDAlJztcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1BBR0UgQlVORExFRF0gQ29udGFpbmVyICMke3Bhc3NlZENvbnRhaW5lcklkfSBmb3VuZCBhbmQgc3R5bGVzIGFwcGxpZWQuIERpbWVuc2lvbnM6ICR7Y29udGFpbmVyLm9mZnNldFdpZHRofXgke2NvbnRhaW5lci5vZmZzZXRIZWlnaHR9YCk7XG4gICAgXG4gICAgXG4gICAgICAgICAgICAgICAgLy8gNC4gQXR0ZW1wdCBFZGl0b3IgQ3JlYXRpb25cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBQYXJhbm9pZCBjaGVjazogRW5zdXJlIE1vbmFjbyBBUEkgaXMgc3RpbGwgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cubW9uYWNvPy5lZGl0b3I/LmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3aW5kb3cubW9uYWNvLmVkaXRvci5jcmVhdGUgZGlzYXBwZWFyZWQgdW5leHBlY3RlZGx5IScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAvLyBEZWZpbmUgZWRpdG9yIG9wdGlvbnMsIGVuc3VyaW5nIGluaXRpYWxDb2RlIGlzIHVzZWRcbiAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRvck9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFzc2VkSW5pdGlhbENvZGUsIC8vIFVzZSB0aGUgY29kZSBwYXNzZWQgZnJvbSBiYWNrZ3JvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogcGFzc2VkTGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVtZTogcGFzc2VkVGhlbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvbWF0aWNMYXlvdXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbWFwOiB7IGVuYWJsZWQ6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRXcmFwOiAnb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQmV5b25kTGFzdExpbmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVpY2tTdWdnZXN0aW9uczogeyBvdGhlcjogdHJ1ZSwgY29tbWVudHM6IHRydWUsIHN0cmluZ3M6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RPblRyaWdnZXJDaGFyYWN0ZXJzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgIC8vIExvZyBvcHRpb25zIHJpZ2h0IGJlZm9yZSBjcmVhdGlvbiwgY29uZmlybWluZyBjb2RlIGxlbmd0aCBhZ2FpblxuICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQQUdFIEJVTkRMRURdIENhbGxpbmcgbW9uYWNvLmVkaXRvci5jcmVhdGUgd2l0aCBvcHRpb25zOicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAuLi5lZGl0b3JPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBgKENvZGUgbGVuZ3RoIENPTkZJUk1FRCBJTlNJREUgUEFHRSBTQ1JJUFQ6ICR7cGFzc2VkSW5pdGlhbENvZGU/Lmxlbmd0aCA/PyAwfSlgXG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBFZGl0b3JcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxlZXRDb2RlTW9uYWNvSW5zdGFuY2UgPSB3aW5kb3cubW9uYWNvLmVkaXRvci5jcmVhdGUoY29udGFpbmVyLCBlZGl0b3JPcHRpb25zKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF3aW5kb3cubGVldENvZGVNb25hY29JbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vbmFjby5lZGl0b3IuY3JlYXRlIGNhbGwgY29tcGxldGVkIGJ1dCByZXR1cm5lZCBubyBpbnN0YW5jZS5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQQUdFIEJVTkRMRURdIFNVQ0NFU1M6IE1vbmFjbyBlZGl0b3IgaW5zdGFuY2Ugc2VlbXMgdG8gYmUgY3JlYXRlZC4nKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gNS4gUG9zdC1DcmVhdGlvbiBDaGVja3MgYW5kIEVycm9yIExpc3RlbmVyc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RlbCA9IHdpbmRvdy5sZWV0Q29kZU1vbmFjb0luc3RhbmNlLmdldE1vZGVsKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbExhbmd1YWdlSWQgPSBtb2RlbC5nZXRMYW5ndWFnZUlkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtQQUdFIEJVTkRMRURdIEVkaXRvciBtb2RlbCBsYW5ndWFnZSBJRCBzdWNjZXNzZnVsbHkgc2V0IHRvOiAnJHthY3R1YWxMYW5ndWFnZUlkfScuIEV4cGVjdGVkOiAnJHtwYXNzZWRMYW5ndWFnZX0nYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdHVhbExhbmd1YWdlSWQgIT09IHBhc3NlZExhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgW1BBR0UgQlVORExFRF0gTGFuZ3VhZ2UgSUQgbWlzbWF0Y2ghIE1vZGVsIGhhcyAnJHthY3R1YWxMYW5ndWFnZUlkfScsIGJ1dCAnJHtwYXNzZWRMYW5ndWFnZX0nIHdhcyByZXF1ZXN0ZWQuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0tLSBBREQgRVJST1IgTElTVEVORVJTIFRPIENBVENIIElOVEVSTkFMIE1PTkFDTyBJU1NVRVMgLS0tXG4gICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQQUdFIEJVTkRMRURdIEFkZGluZyBlcnJvciBsaXN0ZW5lcnMgZm9yIE1vbmFjby4uLicpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhc2ljIGdsb2JhbCBoYW5kbGVyIChtaWdodCBub3QgY2F0Y2ggd29ya2VyIHNwZWNpZmljcylcbiAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuTW9uYWNvRXJyb3JMaXN0ZW5lciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbUEFHRSBCVU5ETEVEXSAtLS0gTU9OQUNPIE9ORVJST1IgREVURUNURUQgKHZpYSB3aW5kb3cuTW9uYWNvRXJyb3JMaXN0ZW5lcikgLS0tOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gdXNlIG9mZmljaWFsL3NlbWktb2ZmaWNpYWwgd2F5IGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lm1vbmFjbz8uRW52aXJvbm1lbnQ/Lm9uV29ya2VyRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubW9uYWNvLkVudmlyb25tZW50Lm9uV29ya2VyRXJyb3IoKGxhYmVsLCBlcnJvcikgPT4geyAvLyBNaWdodCBoYXZlIGxhYmVsIGFyZ3VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1BBR0UgQlVORExFRF0gLS0tIE1PTkFDTyBFTlYgV09SS0VSIEVSUk9SIChMYWJlbDogJHtsYWJlbH0pIC0tLTpgLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUEFHRSBCVU5ETEVEXSBBdHRhY2hlZCBsaXN0ZW5lciB0byBtb25hY28uRW52aXJvbm1lbnQub25Xb3JrZXJFcnJvci4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbUEFHRSBCVU5ETEVEXSB3aW5kb3cubW9uYWNvLkVudmlyb25tZW50Lm9uV29ya2VyRXJyb3Igbm90IGF2YWlsYWJsZS4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9ucyBnbG9iYWxseSAobWlnaHQgY2F0Y2ggYXN5bmMgd29ya2VyIGlzc3VlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbUEFHRSBCVU5ETEVEXSAtLS0gVU5IQU5ETEVEIFJFSkVDVElPTiBERVRFQ1RFRCAtLS06JywgZXZlbnQucmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQQUdFIEJVTkRMRURdIEF0dGFjaGVkIGxpc3RlbmVyIGZvciBnbG9iYWwgdW5oYW5kbGVkcmVqZWN0aW9uLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLS0tIEVORCBFUlJPUiBMSVNURU5FUlMgLS0tXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbUEFHRSBCVU5ETEVEXSBFZGl0b3IgaW5zdGFuY2UgY3JlYXRlZCwgYnV0IGNvdWxkIG5vdCBnZXQgbW9kZWwgaW1tZWRpYXRlbHkgdG8gdmVyaWZ5IGxhbmd1YWdlIG9yIGFkZCBsaXN0ZW5lcnMuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFyayBjcmVhdGlvbiBhcyBzdWNjZXNzZnVsICphZnRlciogYWxsIGNoZWNrcyBhbmQgbGlzdGVuZXIgc2V0dXBzXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb25hY29DcmVhdGVTdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tQQUdFIEJVTkRMRURdIEVSUk9SIGNyZWF0aW5nIE1vbmFjbyBlZGl0b3IgaW5zdGFuY2U6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1vbmFjb0luamVjdEVycm9yID0gYEVkaXRvciBjcmVhdGlvbiBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZSB8fCBTdHJpbmcoZXJyb3IpfWA7XG4gICAgICAgICAgICAgICAgICAgICB3aW5kb3cubW9uYWNvQ3JlYXRlU3RhdHVzID0gJ2Vycm9yJzsgLy8gTWFyayBmYWlsdXJlXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAvLyAtLS0gRU5EOiBDb2RlIEV4ZWN1dGVkIEluc2lkZSBMZWV0Q29kZSBQYWdlIC0tLVxuICAgICAgICAgICAgfSwgW2NvbnRhaW5lcklkLCBsYW5ndWFnZSwgdGhlbWUsIGluaXRpYWxDb2RlXSk7IC8vIFBhc3MgYXJndW1lbnRzIGZyb20gYmFja2dyb3VuZCBzY29wZSB0byB0aGUgcGFnZSBmdW5jdGlvblxuICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBTdGVwIDI6IEVkaXRvciBjcmVhdGlvbiBjb2RlIGluamVjdGlvbiBjb21tYW5kIHNlbnQuYCk7XG4gICAgICAgIC8vIC4uLiByZXN0IG9mIGluamVjdEFuZFNldHVwTW9uYWNvIC4uLlxuICAgICAgICBjb25zb2xlLmxvZyhgW0JhY2tncm91bmRdIChUYWIgJHt0YWJJZH0pIFN0ZXAgMjogRWRpdG9yIGNyZWF0aW9uIGNvZGUgaW5qZWN0aW9uIGNvbW1hbmQgc2VudC5gKTtcblxuXG4gICAgICAgIC8vIC0tLSBTdGVwIDM6IFBvbGwgZm9yIEVkaXRvciBDcmVhdGlvbiBTdGF0dXMgLS0tXG4gICAgICAgIGNvbnNvbGUubG9nKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgU3RlcCAzOiBQb2xsaW5nIGZvciBlZGl0b3IgY3JlYXRpb24gc3RhdHVzICh3aW5kb3cubW9uYWNvQ3JlYXRlU3RhdHVzKS4uLmApO1xuICAgICAgICBhd2FpdCBwb2xsRm9yQ29uZGl0aW9uKFxuICAgICAgICAgICAgdGFiSWQsXG4gICAgICAgICAgICAoKSA9PiB3aW5kb3cubW9uYWNvQ3JlYXRlU3RhdHVzID09PSAnc3VjY2VzcycgfHwgd2luZG93Lm1vbmFjb0NyZWF0ZVN0YXR1cyA9PT0gJ2Vycm9yJyxcbiAgICAgICAgICAgICdlZGl0b3IgY3JlYXRpb24gc3RhdHVzICh3aW5kb3cubW9uYWNvQ3JlYXRlU3RhdHVzKSdcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBDaGVjayB0aGUgZmluYWwgc3RhdHVzIGFmdGVyIHBvbGxpbmcgY29uZmlybXMgY29tcGxldGlvblxuICAgICAgICBjb25zdCBmaW5hbENyZWF0aW9uU3RhdHVzID0gYXdhaXQgZXhlY3V0ZUluTWFpbldvcmxkKHRhYklkLCAoKSA9PiB3aW5kb3cubW9uYWNvQ3JlYXRlU3RhdHVzKTtcbiAgICAgICAgaWYgKGZpbmFsQ3JlYXRpb25TdGF0dXMgIT09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgIGNvbnN0IGNyZWF0aW9uRXJyb3IgPSBhd2FpdCBleGVjdXRlSW5NYWluV29ybGQodGFiSWQsICgpID0+IHdpbmRvdy5tb25hY29JbmplY3RFcnJvcik7XG4gICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0JhY2tncm91bmRdIChUYWIgJHt0YWJJZH0pIEVkaXRvciBjcmVhdGlvbiBmYWlsZWQgaW4gcGFnZS4gU3RhdHVzOiAke2ZpbmFsQ3JlYXRpb25TdGF0dXN9LCBFcnJvcjogJHtjcmVhdGlvbkVycm9yIHx8ICdVbmtub3duIHBhZ2UgZXJyb3InfWApO1xuICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRWRpdG9yIGNyZWF0aW9uIGZhaWxlZC4gU3RhdHVzOiAke2ZpbmFsQ3JlYXRpb25TdGF0dXN9LCBFcnJvcjogJHtjcmVhdGlvbkVycm9yIHx8ICdVbmtub3duIHBhZ2UgZXJyb3InfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgU3RlcCAzOiBNb25hY28gZWRpdG9yIGluc3RhbmNlIGNvbmZpcm1lZCBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5gKTtcblxuXG4gICAgICAgIC8vIC0tLSBTdGVwIDQ6IEluamVjdCBDb2RlIFN5bmMgTGlzdGVuZXIgLS0tXG4gICAgICAgIGNvbnNvbGUubG9nKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgU3RlcCA0OiBJbmplY3RpbmcgY29kZSBzeW5jIGxpc3RlbmVyICYgc2F2ZSB0cmlnZ2VyLi4uYCk7XG4gICAgICAgIGF3YWl0IGV4ZWN1dGVJbk1haW5Xb3JsZCh0YWJJZCwgKGV2ZW50VG9EaXNwYXRjaCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQQUdFIEJVTkRMRURdIFNldHRpbmcgdXAgY29kZSBzeW5jIGxpc3RlbmVyICYgc2F2ZSBldmVudCB0cmlnZ2VyLi4uJyk7XG4gICAgICAgICAgICB3aW5kb3cubW9uYWNvU3luY0Vycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHdpbmRvdy5tb25hY29TeW5jU2V0dXAgPSAncGVuZGluZyc7XG5cbiAgICAgICAgICAgIGlmICghd2luZG93LmxlZXRDb2RlTW9uYWNvSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW1BBR0UgQlVORExFRF0gU3luYyBTZXR1cCBGQVRBTDogd2luZG93LmxlZXRDb2RlTW9uYWNvSW5zdGFuY2UgaXMgbm90IGRlZmluZWQhJyk7XG4gICAgICAgICAgICAgICAgIHdpbmRvdy5tb25hY29TeW5jRXJyb3IgPSAnbGVldENvZGVNb25hY29JbnN0YW5jZSBub3QgZm91bmQgZHVyaW5nIHN5bmMgc2V0dXAuJztcbiAgICAgICAgICAgICAgICAgd2luZG93Lm1vbmFjb1N5bmNTZXR1cCA9ICdmYWlsZWQnO1xuICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgbGV0IGRlYm91bmNlVGltZW91dDtcbiAgICAgICAgICAgICBjb25zdCBERUJPVU5DRV9ERUxBWV9NUyA9IDM1MDtcblxuICAgICAgICAgICAgIHdpbmRvdy5sZWV0Q29kZU1vbmFjb0luc3RhbmNlLm9uRGlkQ2hhbmdlTW9kZWxDb250ZW50KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZW91dCk7XG4gICAgICAgICAgICAgICAgIHdpbmRvdy5tb25hY29TeW5jU3RhdHVzID0gJ2RlYm91bmNpbmcnO1xuXG4gICAgICAgICAgICAgICAgIGRlYm91bmNlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1BBR0UgQlVORExFRF0gRGVib3VuY2VkIGNoYW5nZSBkZXRlY3RlZC4gVHJpZ2dlcmluZyBzYXZlIGV2ZW50IGRpc3BhdGNoLi4uJyk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tb25hY29TeW5jU3RhdHVzID0gJ3RyaWdnZXJpbmdfc2F2ZSc7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb2RlID0gd2luZG93LmxlZXRDb2RlTW9uYWNvSW5zdGFuY2UuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbUEFHRSBCVU5ETEVEXSBEaXNwYXRjaGluZyBjdXN0b20gZXZlbnQgJyR7ZXZlbnRUb0Rpc3BhdGNofScuLi5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNhdmVFdmVudCA9IG5ldyBDdXN0b21FdmVudChldmVudFRvRGlzcGF0Y2gsIHsgZGV0YWlsOiB7IGNvZGU6IGN1cnJlbnRDb2RlIH0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChzYXZlRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1vbmFjb1N5bmNTdGF0dXMgPSAnc2F2ZV9yZXF1ZXN0ZWQnO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChkaXNwYXRjaEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbUEFHRSBCVU5ETEVEXSBSdW50aW1lIEVycm9yIGR1cmluZyBzYXZlIGV2ZW50IGRpc3BhdGNoOicsIGRpc3BhdGNoRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1vbmFjb1N5bmNFcnJvciA9IGBSdW50aW1lIGVycm9yIGRpc3BhdGNoaW5nIHNhdmUgZXZlbnQ6ICR7ZGlzcGF0Y2hFcnJvci5tZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubW9uYWNvU3luY1N0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfSwgREVCT1VOQ0VfREVMQVlfTVMpO1xuICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgY29uc29sZS5sb2coJ1tQQUdFIEJVTkRMRURdIENvZGUgc3luYyBsaXN0ZW5lciBhdHRhY2hlZCBzdWNjZXNzZnVsbHkuJyk7XG4gICAgICAgICAgICAgd2luZG93Lm1vbmFjb1N5bmNTZXR1cCA9ICdzdWNjZXNzJztcblxuICAgICAgICB9LCBbc2F2ZUV2ZW50TmFtZV0pOyAvLyBQYXNzIHRoZSBldmVudCBuYW1lIHRvIHRoZSBwYWdlIGZ1bmN0aW9uXG4gICAgICAgIGNvbnNvbGUubG9nKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgU3RlcCA0OiBTeW5jIGxpc3RlbmVyIGluamVjdGVkLmApO1xuXG5cbiAgICAgICAgLy8gLS0tIFN0ZXAgNTogRmluYWwgU3VjY2VzcyBSZXNwb25zZSAtLS1cbiAgICAgICAgY29uc29sZS5sb2coYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBNb25hY28gKEJ1bmRsZWQpIGluamVjdGlvbiBhbmQgc2V0dXAgcHJvY2VzcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LmApO1xuICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiB0cnVlIH0pO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLy8gQ2F0Y2ggYmxvY2sgZm9yIHRoZSBlbnRpcmUgaW5qZWN0QW5kU2V0dXBNb25hY28gcHJvY2Vzc1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgRkFUQUwgRVJST1IgZHVyaW5nIE1vbmFjbyAoQnVuZGxlZCkgaW5qZWN0aW9uL3NldHVwIHByb2Nlc3M6YCwgZXJyb3IpO1xuICAgICAgICBkZWxldGUgdGFiU2x1Z3NbdGFiSWRdOyAvLyBDbGVhbiB1cCBzbHVnIGFzc29jaWF0aW9uXG4gICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XG5cbiAgICAgICAgIC8vIEJlc3QgZWZmb3J0IGF0dGVtcHQgdG8gc2lnbmFsIHRoZSBlcnJvciBiYWNrIHRvIHRoZSBwYWdlXG4gICAgICAgICB0cnkge1xuICAgICAgICAgICAgIGF3YWl0IGNocm9tZS50YWJzLmdldCh0YWJJZCk7IC8vIENoZWNrIGlmIHRhYiBzdGlsbCBleGlzdHNcbiAgICAgICAgICAgICBhd2FpdCBleGVjdXRlSW5NYWluV29ybGQodGFiSWQsIChtc2cpID0+IHtcbiAgICAgICAgICAgICAgICAgd2luZG93Lm1vbmFjb0luamVjdEVycm9yID0gYEJhY2tncm91bmQgZmFpbHVyZTogJHttc2d9YDtcbiAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5tb25hY29DcmVhdGVTdGF0dXMgIT09ICdzdWNjZXNzJykgd2luZG93Lm1vbmFjb0NyZWF0ZVN0YXR1cyA9ICdlcnJvcic7XG4gICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubW9uYWNvU3luY1NldHVwICE9PSAnc3VjY2VzcycpIHdpbmRvdy5tb25hY29TeW5jU2V0dXAgPSAnZmFpbGVkJztcbiAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1BBR0UgQlVORExFRF0gU2V0dGluZyBlcnJvciBmbGFncyBkdWUgdG8gYmFja2dyb3VuZCBmYWlsdXJlOiAke21zZ31gKTtcbiAgICAgICAgICAgICB9LCBbZXJyb3JNZXNzYWdlXSk7XG4gICAgICAgICB9IGNhdGNoIChjbGVhbnVwRXJyb3IpIHtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBbQmFja2dyb3VuZF0gKFRhYiAke3RhYklkfSkgRmFpbGVkIHRvIHNldCBlcnJvciBzdGF0ZSBvbiBwYWdlIGR1cmluZyBjbGVhbnVwOmAsIGNsZWFudXBFcnJvci5tZXNzYWdlKTtcbiAgICAgICAgIH1cbiAgICAgICAgLy8gU2VuZCBmYWlsdXJlIHJlc3BvbnNlIGJhY2sgdG8gdGhlIGNvbnRlbnQgc2NyaXB0XG4gICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3JNZXNzYWdlIH0pO1xuICAgIH1cbn1cblxuLy8gLS0tIE1lc3NhZ2UgTGlzdGVuZXIgLS0tXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gICAgIGlmICghc2VuZGVyLnRhYj8uaWQpIHtcbiAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gSWdub3JlIG1lc3NhZ2VzIG5vdCBmcm9tIHRhYnNcbiAgICAgfVxuICAgICBjb25zdCB0YWJJZCA9IHNlbmRlci50YWIuaWQ7XG5cbiAgICAgc3dpdGNoIChtZXNzYWdlLmFjdGlvbikge1xuICAgICAgICAgY2FzZSAnaW5qZWN0QW5kQ3JlYXRlTW9uYWNvJzpcbiAgICAgICAgICAgICBpZiAobWVzc2FnZS5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbQmFja2dyb3VuZF0gUmVjZWl2ZWQgJ2luamVjdEFuZENyZWF0ZU1vbmFjbycgZnJvbSBUYWIgJHt0YWJJZH1gKTtcbiAgICAgICAgICAgICAgICAgaW5qZWN0QW5kU2V0dXBNb25hY28odGFiSWQsIG1lc3NhZ2Uub3B0aW9ucywgc2VuZFJlc3BvbnNlKVxuICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0JhY2tncm91bmRdIFVuY2F1Z2h0IGVycm9yIGZyb20gaW5qZWN0QW5kU2V0dXBNb25hY28gZm9yIFRhYiAke3RhYklkfTpgLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7IHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogYFVuaGFuZGxlZCBiYWNrZ3JvdW5kIGVycm9yOiAke2Vyci5tZXNzYWdlfWAgfSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAocmVzcG9uc2VFcnJvcikgeyBjb25zb2xlLndhcm4oYFtCYWNrZ3JvdW5kXSBGYWlsZWQgdG8gc2VuZCBmaW5hbCBlcnJvciByZXNwb25zZSBmb3IgVGFiICR7dGFiSWR9OmAsIHJlc3BvbnNlRXJyb3IubWVzc2FnZSk7IH1cbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gQXN5bmMgcmVzcG9uc2Ugd2lsbCBiZSBzZW50XG4gICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW0JhY2tncm91bmRdIFJlY2VpdmVkICdpbmplY3RBbmRDcmVhdGVNb25hY28nIHdpdGhvdXQgb3B0aW9ucyBmcm9tIFRhYiAke3RhYklkfWApO1xuICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IFwiTWlzc2luZyAnb3B0aW9ucycgaW4gbWVzc2FnZS5cIiB9KTtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgIH1cblxuICAgICAgICAgY2FzZSAnc2F2ZUNvZGVGb3JUYWInOlxuICAgICAgICAgICAgIGNvbnN0IHNsdWcgPSB0YWJTbHVnc1t0YWJJZF07XG4gICAgICAgICAgICAgY29uc3QgY29kZVRvU2F2ZSA9IG1lc3NhZ2UuY29kZTtcbiAgICAgICAgICAgICBpZiAoIXNsdWcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBDYW5ub3Qgc2F2ZSBjb2RlOiBObyBzbHVnIGFzc29jaWF0ZWQuYCk7XG4gICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGBDYW5ub3Qgc2F2ZTogU2x1ZyBmb3IgVGFiICR7dGFiSWR9IG5vdCBmb3VuZC5gIH0pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBpZiAoY29kZVRvU2F2ZSA9PT0gdW5kZWZpbmVkIHx8IGNvZGVUb1NhdmUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBDYW5ub3Qgc2F2ZSBjb2RlIGZvciBzbHVnICcke3NsdWd9JzogQ29kZSBpcyBtaXNzaW5nLmApO1xuICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBgQ2Fubm90IHNhdmU6IENvZGUgaXMgbWlzc2luZy5gIH0pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICBjb25zdCBzdG9yYWdlS2V5ID0gYGxlZXRjb2RlQ29kZS0ke3NsdWd9YDtcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0JhY2tncm91bmRdIChUYWIgJHt0YWJJZH0pIFNhdmluZyBjb2RlIGZvciBzbHVnICcke3NsdWd9JyAobGVuZ3RoOiAke2NvZGVUb1NhdmUubGVuZ3RofSkuIEtleTogJHtzdG9yYWdlS2V5fWApO1xuICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IFtzdG9yYWdlS2V5XTogY29kZVRvU2F2ZSB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtCYWNrZ3JvdW5kXSAoVGFiICR7dGFiSWR9KSBFcnJvciBzYXZpbmcgY29kZSB0byBzdG9yYWdlIGZvciBzbHVnICcke3NsdWd9JzpgLCBjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBjaHJvbWUucnVudGltZS5sYXN0RXJyb3IubWVzc2FnZSB9KTtcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gQXN5bmMgcmVzcG9uc2Ugd2lsbCBiZSBzZW50XG5cbiAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBBY3Rpb24gbm90IHJlY29nbml6ZWRcbiAgICAgfVxufSk7XG5cbi8vIC0tLSBUYWIgTGlmZWN5Y2xlIE1hbmFnZW1lbnQgLS0tXG5jaHJvbWUudGFicy5vblJlbW92ZWQuYWRkTGlzdGVuZXIoKHRhYklkLCByZW1vdmVJbmZvKSA9PiB7XG4gICAgaWYgKHRhYlNsdWdzW3RhYklkXSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW0JhY2tncm91bmRdIFRhYiAke3RhYklkfSByZW1vdmVkLiBDbGVhbmluZyB1cCBhc3NvY2lhdGVkIHNsdWcgJyR7dGFiU2x1Z3NbdGFiSWRdfScuYCk7XG4gICAgICAgIGRlbGV0ZSB0YWJTbHVnc1t0YWJJZF07XG4gICAgfVxufSk7XG5cbmNocm9tZS50YWJzLm9uVXBkYXRlZC5hZGRMaXN0ZW5lcigodGFiSWQsIGNoYW5nZUluZm8sIHRhYikgPT4ge1xuICAgIGlmICh0YWJTbHVnc1t0YWJJZF0gJiYgY2hhbmdlSW5mby5zdGF0dXMgPT09ICdjb21wbGV0ZScgJiYgdGFiLnVybCkge1xuICAgICAgICAgY29uc3QgYXNzb2NpYXRlZFNsdWcgPSB0YWJTbHVnc1t0YWJJZF07XG4gICAgICAgICBjb25zdCBwcm9ibGVtVXJsUGF0dGVybiA9IG5ldyBSZWdFeHAoYF5odHRwcz86Ly8oPzp3d3dcXFxcLik/bGVldGNvZGVcXFxcLmNvbS9wcm9ibGVtcy8ke2Fzc29jaWF0ZWRTbHVnfSg/Oi8uKik/JGAsICdpJyk7XG4gICAgICAgICBpZiAoIXByb2JsZW1VcmxQYXR0ZXJuLnRlc3QodGFiLnVybCkpIHtcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0JhY2tncm91bmRdIFRhYiAke3RhYklkfSBuYXZpZ2F0ZWQgYXdheSBmcm9tIHByb2JsZW0gJyR7YXNzb2NpYXRlZFNsdWd9JyAoTmV3IFVSTDogJHt0YWIudXJsfSkuIENsZWFuaW5nIHVwIHNsdWcgYXNzb2NpYXRpb24uYCk7XG4gICAgICAgICAgICAgZGVsZXRlIHRhYlNsdWdzW3RhYklkXTtcbiAgICAgICAgIH1cbiAgICAgfVxufSk7XG5cbi8vIC0tLSBFeHRlbnNpb24gTGlmZWN5Y2xlIC0tLVxuY2hyb21lLnJ1bnRpbWUub25JbnN0YWxsZWQuYWRkTGlzdGVuZXIoZGV0YWlscyA9PiB7XG4gICAgY29uc29sZS5sb2coYFtCYWNrZ3JvdW5kXSBFeHRlbnNpb24gJHtkZXRhaWxzLnJlYXNvbn0uIFZlcnNpb246ICR7Y2hyb21lLnJ1bnRpbWUuZ2V0TWFuaWZlc3QoKS52ZXJzaW9ufWApO1xufSk7XG5jaHJvbWUucnVudGltZS5vblN0YXJ0dXAuYWRkTGlzdGVuZXIoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiW0JhY2tncm91bmRdIEV4dGVuc2lvbiBzdGFydGVkIHVwLlwiKTtcbn0pOyJdLCJuYW1lcyI6WyJjb25zb2xlIiwibG9nIiwidGFiU2x1Z3MiLCJhc3luYyIsImV4ZWN1dGVJbk1haW5Xb3JsZCIsInRhYklkIiwiZnVuYyIsImFyZ3MiLCJjaHJvbWUiLCJ0YWJzIiwiZ2V0IiwiZXJyb3IiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJ3YXJuIiwiRXJyb3IiLCJyZXN1bHRzIiwic2NyaXB0aW5nIiwiZXhlY3V0ZVNjcmlwdCIsInRhcmdldCIsImFsbEZyYW1lcyIsIndvcmxkIiwibGVuZ3RoIiwicmVzdWx0IiwicG9sbEZvckNvbmRpdGlvbiIsImNoZWNrRnVuYyIsImRlc2NyaXB0aW9uIiwiYXR0ZW1wdHMiLCJwYWdlRXJyb3JTdGF0dXMiLCJ3aW5kb3ciLCJtb25hY29JbmplY3RFcnJvciIsIm1vbmFjb1N5bmNFcnJvciIsIm1vbmFjb0NyZWF0ZVN0YXR1cyIsIm1vbmFjb1N5bmNTZXR1cCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInJ1bnRpbWUiLCJvbk1lc3NhZ2UiLCJhZGRMaXN0ZW5lciIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsInRhYiIsImlkIiwiYWN0aW9uIiwib3B0aW9ucyIsImNvbnRhaW5lcklkIiwibGFuZ3VhZ2UiLCJ0aGVtZSIsImluaXRpYWxDb2RlIiwicHJvYmxlbVNsdWciLCJzYXZlRXZlbnROYW1lIiwibW9uYWNvIiwiZWRpdG9yIiwiY3JlYXRlIiwicGFzc2VkQ29udGFpbmVySWQiLCJwYXNzZWRMYW5ndWFnZSIsInBhc3NlZFRoZW1lIiwicGFzc2VkSW5pdGlhbENvZGUiLCJNb25hY29FbnZpcm9ubWVudCIsImdldFdvcmtlclVybCIsImVkaXRvcldvcmtlckxhYmVsIiwiZWRpdG9yV29ya2VyUGF0aCIsImxhbmd1YWdlV29ya2VyUGF0aCIsImUiLCJjb250YWluZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJkaXNwbGF5IiwiaGVpZ2h0Iiwid2lkdGgiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImVkaXRvck9wdGlvbnMiLCJ2YWx1ZSIsImF1dG9tYXRpY0xheW91dCIsIm1pbmltYXAiLCJlbmFibGVkIiwid29yZFdyYXAiLCJzY3JvbGxCZXlvbmRMYXN0TGluZSIsImZvbnRTaXplIiwicXVpY2tTdWdnZXN0aW9ucyIsIm90aGVyIiwiY29tbWVudHMiLCJzdHJpbmdzIiwic3VnZ2VzdE9uVHJpZ2dlckNoYXJhY3RlcnMiLCJsZWV0Q29kZU1vbmFjb0luc3RhbmNlIiwibW9kZWwiLCJnZXRNb2RlbCIsImFjdHVhbExhbmd1YWdlSWQiLCJnZXRMYW5ndWFnZUlkIiwiTW9uYWNvRXJyb3JMaXN0ZW5lciIsIkVudmlyb25tZW50Iiwib25Xb3JrZXJFcnJvciIsImxhYmVsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwicmVhc29uIiwiU3RyaW5nIiwiZmluYWxDcmVhdGlvblN0YXR1cyIsImNyZWF0aW9uRXJyb3IiLCJldmVudFRvRGlzcGF0Y2giLCJkZWJvdW5jZVRpbWVvdXQiLCJvbkRpZENoYW5nZU1vZGVsQ29udGVudCIsImNsZWFyVGltZW91dCIsIm1vbmFjb1N5bmNTdGF0dXMiLCJjdXJyZW50Q29kZSIsImdldFZhbHVlIiwic2F2ZUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJjb2RlIiwiZGlzcGF0Y2hFdmVudCIsImRpc3BhdGNoRXJyb3IiLCJzdWNjZXNzIiwiZXJyb3JNZXNzYWdlIiwibXNnIiwiY2xlYW51cEVycm9yIiwiaW5qZWN0QW5kU2V0dXBNb25hY28iLCJjYXRjaCIsImVyciIsInJlc3BvbnNlRXJyb3IiLCJzbHVnIiwiY29kZVRvU2F2ZSIsInN0b3JhZ2VLZXkiLCJzdG9yYWdlIiwibG9jYWwiLCJzZXQiLCJsYXN0RXJyb3IiLCJvblJlbW92ZWQiLCJyZW1vdmVJbmZvIiwib25VcGRhdGVkIiwiY2hhbmdlSW5mbyIsInN0YXR1cyIsInVybCIsImFzc29jaWF0ZWRTbHVnIiwiUmVnRXhwIiwidGVzdCIsIm9uSW5zdGFsbGVkIiwiZGV0YWlscyIsImdldE1hbmlmZXN0IiwidmVyc2lvbiIsIm9uU3RhcnR1cCJdLCJzb3VyY2VSb290IjoiIn0=