console.log("[Content Script] LeetCode Monaco Injector: Loaded.");const EDITOR_CONTAINER_ID="monaco-editor-container",ORIGINAL_EDITOR_SELECTOR="#editor",SAVE_EVENT_NAME="__monaco_save_code__";function findEditorContainerAndPrepare(){console.log("[Content Script] Attempting to find original editor ('#editor') and prepare container...");const e=document.querySelector("#editor");if(!e)return console.error("[Content Script] CRITICAL - Could not find original editor element ('#editor')! Cannot inject Monaco."),null;console.log("[Content Script] Found original editor element:",e);const t=e.parentElement;if(!t)return console.error("[Content Script] Found original editor, but it has no parent element. Cannot inject container."),null;console.log("[Content Script] Hiding original editor element:",e),e.style.display="none";let o=document.getElementById(EDITOR_CONTAINER_ID);return o?(console.log(`[Content Script] Reusing existing Monaco container ('#${EDITOR_CONTAINER_ID}').`),o.style.display="block"):(console.log(`[Content Script] Creating new Monaco container ('#${EDITOR_CONTAINER_ID}').`),o=document.createElement("div"),o.id=EDITOR_CONTAINER_ID,t.appendChild(o),console.log("[Content Script] Appended Monaco container to parent:",t)),o.style.display="block",EDITOR_CONTAINER_ID}function getLeetCodeLanguage(){const e='button[aria-haspopup="dialog"][data-state="closed"] > button.group';try{const t=document.querySelector(e);if(t&&t.textContent){const e=t.textContent.toLowerCase().trim();console.log("[Content Script] Detected language text from UI:",e);const o={python:"python",python3:"python",java:"java","c++":"cpp",cpp:"cpp",c:"c","c#":"csharp",csharp:"csharp",javascript:"javascript",typescript:"typescript",php:"php",swift:"swift",kotlin:"kotlin",dart:"dart",golang:"go",go:"go",ruby:"ruby",scala:"scala",rust:"rust"}[e];return o?(console.log(`[Content Script] Mapped to Monaco language: '${o}'`),o):(console.warn(`[Content Script] No mapping found for UI language '${e}'. Defaulting to 'plaintext'.`),"plaintext")}console.warn(`[Content Script] Could not find language dropdown element using selector: '${e}' or it has no text content. Defaulting to 'plaintext'.`)}catch(e){console.error("[Content Script] Error detecting language from UI:",e)}return"plaintext"}function findNestedKey(e,t){if("object"!=typeof e||null===e)return null;if(Object.prototype.hasOwnProperty.call(e,t))return e[t];for(const o in e)if(Object.prototype.hasOwnProperty.call(e,o)){const n=findNestedKey(e[o],t);if(null!==n)return n}return null}function getDefaultCodeFromPageData(e){console.log(`[Content Script] Attempting to retrieve default code from page data ('codeSnippets') for language: ${e}...`);const t=`// Monaco Editor Injected! (Language: ${e})\n// Failed to retrieve default code snippet for this language.\n// Please check console logs.`;let o=null;const n=["__INITIAL_STATE__","pageData","payload","appContext"];for(const e of n)if("object"==typeof window[e]&&null!==window[e]){let t=findNestedKey(window[e],"codeSnippets");if(t&&Array.isArray(t)){console.log(`[Content Script] Found 'codeSnippets' in window.${e}`),o=t;break}}if(!o){console.log("[Content Script] Not found in global vars, searching <script type='application/json'>...");const e=document.querySelectorAll('script[type="application/json"]');for(const t of e)try{let e=findNestedKey(JSON.parse(t.textContent||""),"codeSnippets");if(e&&Array.isArray(e)){console.log("[Content Script] Found 'codeSnippets' in a <script type='application/json'> tag."),o=e;break}}catch(e){}}if(!o||!Array.isArray(o))return console.error("[Content Script] ERROR: Could not find valid 'codeSnippets' array in page data."),t;console.log(`[Content Script] Looking for snippet with langSlug matching Monaco language: '${e}'`);const r=o.find((t=>{const o=t?.langSlug?.toLowerCase();return!!o&&(o===e||"python"===e&&("python3"===o||"python"===o)||"go"===e&&"golang"===o||"cpp"===e&&("c++"===o||"cpp"===o)||"csharp"===e&&"c#"===o)}));return r&&"string"==typeof r.code?(console.log(`[Content Script] SUCCESS: Found default code snippet for langSlug '${r.langSlug}'.`),r.code):(console.warn(`[Content Script] WARNING: Could not find a matching code snippet for Monaco language '${e}'. Available langSlugs:`,o.map((e=>e?.langSlug))),t+`\n// Available snippet languages: ${o.map((e=>e?.langSlug)).join(", ")}`)}function getProblemSlug(){const e=window.location.pathname.match(/problems\/([^/]+)/),t=e?e[1]:null;return t||console.warn("[Content Script] Could not determine LeetCode problem slug from URL:",window.location.pathname),t}function initializeEditor(){console.log("[Content Script] Initializing Monaco Editor injection...");const e=getProblemSlug();if(!e)return void console.error("[Content Script] Cannot proceed: Problem slug is required for saving.");console.log("[Content Script] Detected problem slug:",e);const t=findEditorContainerAndPrepare();if(!t)return void console.error("[Content Script] Initialization failed: Could not prepare editor container.");const o=getLeetCodeLanguage();console.warn(`[Content Script] FORCING LANGUAGE TO '${o}' FOR TESTING PURPOSES.`);const n="vs-dark",r=`leetcodeCode-${e}-${o}`;console.log(`[Content Script] Checking chrome.storage.local for key: '${r}' (using language: ${o})`),chrome.storage.local.get([r],(i=>{let a="",c="";chrome.runtime.lastError?(console.error("[Content Script] Error reading from chrome.storage:",chrome.runtime.lastError),a=getDefaultCodeFromPageData(o),c=`Default (Storage Error, Lang: ${o})`):i&&void 0!==i[r]?(console.log(`[Content Script] Found saved code for slug '${e}' and lang '${o}' in storage.`),a=i[r],c="Storage"):(console.log(`[Content Script] No saved code found for slug '${e}' and lang '${o}'. Using default snippet.`),a=getDefaultCodeFromPageData(o),c=`Default (No Saved, Lang: ${o})`),console.log(`[Content Script] Requesting Monaco injection for slug '${e}'. Language: '${o}'. Code source: ${c}. Options:`,{containerId:t,language:o,theme:n,initialCodeLength:a?.length??0}),chrome.runtime.sendMessage({action:"injectAndCreateMonaco",options:{containerId:t,language:o,theme:n,initialCode:a,problemSlug:e}},(e=>{if(chrome.runtime.lastError){console.error("[Content Script] Error sending message to background:",chrome.runtime.lastError.message);const e=document.getElementById(t);e&&(e.innerHTML=`<p style='color:orange; padding: 10px; border: 1px dashed orange;'>Error communicating with background script: ${chrome.runtime.lastError.message}. Check extension logs.</p>`)}else if(e)if(e.success)console.log("[Content Script] Background script reported SUCCESSFUL Monaco injection!");else{console.error("[Content Script] Background script reported Monaco injection FAILURE:",e.error);const o=document.getElementById(t);o&&(o.innerHTML=`<p style='color:red; padding: 10px; border: 1px dashed red;'>Failed to load Monaco Editor: ${e.error||"Unknown error"}. Check extension console (Background & Page).</p>`)}else{console.error("[Content Script] No response received from background script. It might have crashed or disconnected.");const e=document.getElementById(t);e&&(e.innerHTML="<p style='color:red; padding: 10px; border: 1px dashed red;'>No response from background script. Check extension status and logs.</p>")}}))}))}window.addEventListener(SAVE_EVENT_NAME,(e=>{if(console.log(`[Content Script] Received '${SAVE_EVENT_NAME}' event.`),e.detail&&void 0!==e.detail.code){const t=e.detail.code;console.log(`[Content Script] Relaying 'saveCodeForTab' message to background (code length: ${t.length})`),chrome.runtime.sendMessage({action:"saveCodeForTab",code:t},(e=>{chrome.runtime.lastError?console.error("[Content Script] Error sending 'saveCodeForTab' message:",chrome.runtime.lastError.message):e&&!e.success&&console.error("[Content Script] Background reported save FAILURE:",e.error)}))}else console.warn(`[Content Script] Received '${SAVE_EVENT_NAME}' event without valid code detail.`)}));const MAX_INIT_ATTEMPTS=20,INIT_CHECK_INTERVAL_MS=750;let initAttempts=0,initCheckInterval=null;function attemptInitialization(){initAttempts++;const e=document.querySelector("#editor"),t=document.getElementById(EDITOR_CONTAINER_ID);e||t?(e?console.log(`[Content Script] Found '#editor' (attempt ${initAttempts}). Proceeding with initialization.`):console.warn(`[Content Script] Found existing container '${EDITOR_CONTAINER_ID}', but original editor '#editor' is missing. Attempting init anyway.`),initCheckInterval&&clearInterval(initCheckInterval),initializeEditor()):initAttempts>=20&&(initCheckInterval&&clearInterval(initCheckInterval),console.error(`[Content Script] Timed out after ${initAttempts} attempts waiting for '#editor' element. Monaco injection aborted.`))}initCheckInterval=setInterval(attemptInitialization,750);